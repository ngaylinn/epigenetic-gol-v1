/*
 * Simulate the lifetimes of organisms whose phenotype is a GOL world. This
 * module has functions for simulating many organisms simultaneously on the
 * GPU, but also one-off equivalents that run on the CPU.
 */

#ifndef __GOL_SIMULATION_H__
#define __GOL_SIMULATION_H__

#include "environment.h"
#include "phenotype_program.h"

namespace epigenetic_gol_kernel {

/*
 * Compute Game of Life Simulations in parallel.
 *
 * This function simulates population_size individual Game of Life simulations,
 * running each for NUM_STEPS iterations. Fitness is computed based on the
 * given goal. Each simulation is generated by first developing a phenotype
 * for each organism from the corresponding PhenotypeProgram and Genotype, then
 * applying the GOL state transition rules to see how it evolves from there.
 * The final fitness score for each organism will be stored in fitness_scores
 * at the corresponding position. If RECORD is true, full Videos of all
 * simulations will be output to Videos.
 *
 * This function is usually called via the Simulator class, which manages all
 * the GPU memory allocations used here.
 */
template <bool RECORD>
void simulate_population(
        const unsigned int population_size,
        const unsigned int num_species,
        const FitnessGoal& goal,
        const PhenotypeProgram* programs,
        const Genotype* genotypes,
        Fitness* fitness_scores,
        Video* videos=nullptr);

// Simulate just one organism's full lifetime on the CPU, and record a
// Video. This is used to sample results from the full population.
Video* simulate_organism(
        const PhenotypeProgram& h_program,
        const Genotype& h_genotype);

// Run a single Game of Life Simulation on the CPU from the starting
// Frame provided. This is used for testing that GOL simulations work
// as expected, regardless of the organism that generated them.
Video* simulate_phenotype(const Frame& phenotype);

// Render a single organism's phenotype. This is used for testing the
// development process without running a GOL simulation. Even though
// this is a one-off operation, it runs on the GPU because development
// has no CPU-side implementation.
const Frame* render_phenotype(
        const PhenotypeProgram& h_program,
        const Genotype* h_genotype=nullptr);

} // namespace epigenetic_gol_kernel

#endif
